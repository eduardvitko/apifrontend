import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import { Alert, Button, Card, Container, Form, Spinner } from 'react-bootstrap';

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—É —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
import { registerUser } from '../api';

function RegisterPage() {
    const { t } = useTranslation();
    const navigate = useNavigate();

    const [form, setForm] = useState({ username: '', password: '', phone: '' });
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');
    const [loading, setLoading] = useState(false);

    const handleChange = (e) => {
        setForm({ ...form, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setSuccessMessage('');
        setLoading(true);

        try {
            await registerUser(form);
            setSuccessMessage(t('reg_success') + ' ' + t('reg_success_redirect'));

            // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É
            setTimeout(() => {
                navigate('/login');
            }, 2000);

        } catch (err) {
            console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);

            // ‚Üì‚Üì‚Üì –û–°–¨ –ö–õ–Æ–ß–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ‚Üì‚Üì‚Üì
            // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —ñ –Ω–∞–¥—ñ–π–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ Axios
            if (err.response) {
                // –Ø–∫—â–æ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞
                // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ `err.response.data.message` (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è Spring)
                // –Ø–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ –≤ `err.response.data` (—è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–æ–∫)
                // –Ø–∫—â–æ —ñ –π–æ–≥–æ –Ω–µ–º–∞—î, –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                const errorMessage = err.response.data?.message || err.response.data || t('reg_fail');
                setError(errorMessage);
            } else {
                // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–º–∞—î –≤–∑–∞–≥–∞–ª—ñ (–ø—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ—é)
                setError(t('reg_server_error'));
            }
        } finally {
            setLoading(false);
        }
    };

    return (
        <Container className="d-flex justify-content-center align-items-center" style={{ minHeight: '80vh' }}>
            <Card className="shadow p-4" style={{ maxWidth: '500px', width: '100%' }}>
                <Card.Body>
                    <h3 className="mb-4 text-center">üìù {t('reg_title')}</h3>

                    {error && <Alert variant="danger">{error}</Alert>}
                    {successMessage && <Alert variant="success">{successMessage}</Alert>}

                    <Form onSubmit={handleSubmit} noValidate>
                        <Form.Group className="mb-3">
                            <Form.Label>{t('reg_field_username')}</Form.Label>
                            <Form.Control
                                name="username"
                                value={form.username}
                                onChange={handleChange}
                                required
                                autoFocus
                            />
                        </Form.Group>
                        <Form.Group className="mb-3">
                            <Form.Label>{t('reg_field_phone')}</Form.Label>
                            <Form.Control
                                name="phone"
                                value={form.phone}
                                onChange={handleChange}
                                placeholder="+380..."
                                required
                            />
                        </Form.Group>
                        <Form.Group className="mb-3">
                            <Form.Label>{t('reg_field_password')}</Form.Label>
                            <Form.Control
                                type="password"
                                name="password"
                                value={form.password}
                                onChange={handleChange}
                                required
                            />
                        </Form.Group>
                        <Button className="w-100" type="submit" disabled={loading || successMessage}>
                            {loading ? (
                                <>
                                    <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true"/>
                                    <span className="ms-2">{t('reg_processing')}...</span>
                                </>
                            ) : t('reg_button')}
                        </Button>
                    </Form>
                </Card.Body>
            </Card>
        </Container>
    );
}

export default RegisterPage;