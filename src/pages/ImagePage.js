import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Form, Button, Alert, Spinner } from 'react-bootstrap';

// 1. –Ü–ú–ü–û–†–¢–£–Ñ–ú–û –ù–ê–®–Ü –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á
import {
    fetchAllImages,
    createImage,
    updateImage,
    deleteImage,
    fetchAdminProducts
} from '../api';

const ImagePage = () => {
    const [images, setImages] = useState([]);
    const [products, setProducts] = useState([]);
    const [selectedImage, setSelectedImage] = useState(null);
    const [formData, setFormData] = useState({ url: '', altText: '', productId: '' });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [message, setMessage] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false); // –î–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É

    const navigate = useNavigate();

    // –Ñ–¥–∏–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
    const loadData = useCallback(async () => {
        setLoading(true);
        setError('');
        try {
            const [imagesRes, productsRes] = await Promise.all([
                fetchAllImages(),
                fetchAdminProducts()
            ]);
            setImages(imagesRes.data);
            setProducts(productsRes.data);
        } catch (err) {
            setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ. –ú–æ–∂–ª–∏–≤–æ, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.');
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        if (!localStorage.getItem('token')) {
            setError('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.');
            setLoading(false);
            navigate('/admin/login');
            return;
        }
        loadData();
    }, [loadData, navigate]);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    // 2. –û–ù–û–í–õ–ï–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –í–Ü–î–ü–†–ê–í–ö–ò –§–û–†–ú–ò –ó –í–ê–õ–Ü–î–ê–¶–Ü–Ñ–Æ
    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setMessage('');

        // --- –ö–õ–Æ–ß–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–ê–õ–Ü–î–ê–¶–Ü–Ø ---
        if (!formData.productId || formData.productId === '') {
            setError('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∑—ñ —Å–ø–∏—Å–∫—É.');
            return; // –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –≤–∏–±—Ä–∞–Ω–æ
        }
        if (!formData.url.trim()) {
            setError('URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.');
            return;
        }

        setIsSubmitting(true);

        const dataToSend = {
            url: formData.url,
            altText: formData.altText,
            productId: parseInt(formData.productId, 10)
        };

        try {
            if (selectedImage) {
                await updateImage(selectedImage.id, { ...dataToSend, id: selectedImage.id });
                setMessage('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ');
            } else {
                await createImage(dataToSend);
                setMessage('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! ‚úÖ');
            }

            // –û—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            setSelectedImage(null);
            setFormData({ url: '', altText: '', productId: '' });
            await loadData();
        } catch (err) {
            setError(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.');
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleEditClick = (image) => {
        setSelectedImage(image);
        setFormData({
            url: image.url,
            altText: image.altText || '',
            productId: image.productId ? String(image.productId) : ''
        });
        window.scrollTo(0, 0);
    };

    const handleDelete = async (id) => {
        if (window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è?')) {
            try {
                await deleteImage(id);
                setMessage('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è');
                setImages(prev => prev.filter(img => img.id !== id));
            } catch (err) {
                setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.');
            }
        }
    };

    if (loading) return <Container className="text-center mt-5"><Spinner animation="border" /></Container>;

    return (
        <Container className="py-5">
            <h1 className="text-center mb-4">–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏</h1>
            <Button variant="secondary" onClick={() => navigate('/admin')} className="mb-4">
                ‚Üê –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
            </Button>

            {error && <Alert variant="danger" onClose={() => setError('')} dismissible>{error}</Alert>}
            {message && <Alert variant="success" onClose={() => setMessage('')} dismissible>{message}</Alert>}

            <Card className="mb-5 shadow-sm">
                <Card.Header as="h5">{selectedImage ? '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è' : '–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'}</Card.Header>
                <Card.Body>
                    <Form onSubmit={handleSubmit}>
                        <Row>
                            <Col md={12}><Form.Control name="url" value={formData.url} onChange={handleInputChange} placeholder="URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" required className="mb-3" /></Col>
                            <Col md={12}><Form.Control name="altText" value={formData.altText} onChange={handleInputChange} placeholder="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç (Alt Text)" className="mb-3" /></Col>
                            <Col md={12}>
                                <Form.Select name="productId" value={formData.productId} onChange={handleInputChange} required className="mb-3">
                                    <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç --</option>
                                    {products.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
                                </Form.Select>
                            </Col>
                        </Row>
                        <Button type="submit" disabled={isSubmitting}>
                            {isSubmitting ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : (selectedImage ? '–û–Ω–æ–≤–∏—Ç–∏' : '–°—Ç–≤–æ—Ä–∏—Ç–∏')}
                        </Button>
                        {selectedImage && <Button variant="outline-secondary" className="ms-2" onClick={() => { setSelectedImage(null); setFormData({ url: '', altText: '', productId: '' }); }} disabled={isSubmitting}>–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>}
                    </Form>
                </Card.Body>
            </Card>

            <h2>–Ü—Å–Ω—É—é—á—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</h2>
            <Row xs={1} sm={2} md={3} lg={4} className="g-4 mt-2">
                {images.length === 0 ? (
                    <Col><p>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.</p></Col>
                ) : (
                    images.map(image => (
                        <Col key={image.id}>
                            <Card className="h-100">
                                <Card.Img variant="top" src={image.url} alt={image.altText} style={{ height: '200px', objectFit: 'cover' }} />
                                <Card.Body>
                                    <Card.Text className="small"><strong>Alt:</strong> {image.altText || 'N/A'}</Card.Text>
                                    <Card.Text className="small"><strong>–ü—Ä–æ–¥—É–∫—Ç:</strong> {products.find(p => p.id === image.productId)?.name || 'N/A'}</Card.Text>
                                </Card.Body>
                                <Card.Footer>
                                    <Button variant="primary" size="sm" className="me-2" onClick={() => handleEditClick(image)}>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</Button>
                                    <Button variant="danger" size="sm" onClick={() => handleDelete(image.id)}>–í–∏–¥–∞–ª–∏—Ç–∏</Button>
                                </Card.Footer>
                            </Card>
                        </Col>
                    ))
                )}
            </Row>
        </Container>
    );
};

export default ImagePage;
