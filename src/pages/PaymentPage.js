import React, { useEffect, useState, useCallback, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Form, Button, Table, Alert, Spinner } from 'react-bootstrap';

// 1. –Ü–ú–ü–û–†–¢–£–Ñ–ú–û –ê–î–ê–ü–¢–û–í–ê–ù–Ü –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á//
import {
    fetchUserProfile,
    fetchOrdersByUserId,
    fetchUserAddresses,
    createAddress,
    fetchMyPayments, // –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
    createPayment,
    updatePayment,
    deletePayment,
    markOrderAsPaid,
    updateOrderAddress
} from '../api';

const PaymentPage = () => {
    // --- –°—Ç–∞–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
    const [payments, setPayments] = useState([]);
    const [orders, setOrders] = useState([]);
    const [addresses, setAddresses] = useState([]);
    const [selectedPayment, setSelectedPayment] = useState(null);
    const [paymentFormData, setPaymentFormData] = useState({ orderId: '', addressId: '', method: '', amount: '', paymentDate: '' });
    const [addressFormData, setAddressFormData] = useState({ country: '', city: '', street: '', houseNumber: '', apartmentNumber: '', postalCode: '', region: '' });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [message, setMessage] = useState('');

    const formRef = useRef(null);
    const location = useLocation();
    const navigate = useNavigate();

    // 2. –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ó –î–í–û–ú–ê –ö–†–û–ö–ê–ú–ò
    const loadAllData = useCallback(async () => {
        setLoading(true);
        setError('');
        try {
            const userResponse = await fetchUserProfile();
            const userId = userResponse.data.id;

            const [paymentsRes, ordersRes, addressesRes] = await Promise.all([
                fetchMyPayments(), // –ú–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç /my –Ω–µ —ñ—Å–Ω—É—î
                fetchOrdersByUserId(userId),
                fetchUserAddresses(userId)
            ]);

            setPayments(paymentsRes.data);
            setOrders(ordersRes.data);
            setAddresses(addressesRes.data);
        } catch (err) {
            setError(err.response?.data?.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ.');
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        if (!localStorage.getItem('token')) {
            setError('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –∫–µ—Ä—É–≤–∞—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏.');
            setLoading(false);
            navigate('/login');
            return;
        }
        loadAllData();
    }, [loadAllData, navigate]);

    // –ï—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ-–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
    useEffect(() => {
        if (location.state?.orderId) {
            const { orderId, amount } = location.state;
            setPaymentFormData(prev => ({
                ...prev,
                orderId: orderId.toString(),
                amount: amount ? amount.toFixed(2).toString() : '',
            }));
            formRef.current?.scrollIntoView({ behavior: 'smooth' });
        }
    }, [location.state]);

    // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω —É —Ñ–æ—Ä–º—ñ –ø–ª–∞—Ç–µ–∂—É
    const handlePaymentInputChange = (e) => {
        const { name, value } = e.target;
        setPaymentFormData(prev => ({ ...prev, [name]: value }));
        if (name === 'orderId' && value) {
            const selectedOrder = orders.find(o => o.id.toString() === value);
            if (selectedOrder) {
                setPaymentFormData(prev => ({
                    ...prev,
                    orderId: value,
                    amount: selectedOrder.total.toFixed(2).toString()
                }));
            }
        }
    };

    const handleAddressInputChange = (e) => {
        const { name, value } = e.target;
        setAddressFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleAddressSubmit = async (e) => {
        e.preventDefault();
        setMessage(''); setError('');
        try {
            const response = await createAddress(addressFormData);
            setAddresses(prev => [...prev, response.data]);
            setMessage('–ê–¥—Ä–µ—Å—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! ‚úÖ');
            setAddressFormData({ country: '', city: '', street: '', houseNumber: '', apartmentNumber: '', postalCode: '', region: '' });
        } catch (err) { setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É.'); }
    };

    const handlePaymentFormSubmit = async (e) => {
        e.preventDefault();
        setMessage(''); setError('');
        const dataToSend = {
            orderId: parseInt(paymentFormData.orderId),
            addressId: parseInt(paymentFormData.addressId),
            method: paymentFormData.method,
            amount: parseFloat(paymentFormData.amount),
            paymentDate: paymentFormData.paymentDate || null,
        };
        try {
            if (selectedPayment) {
                await updatePayment(selectedPayment.id, { ...dataToSend, id: selectedPayment.id });
                setMessage('–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ');
            } else {
                await createPayment(dataToSend);
                setMessage('–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! ‚úÖ');
                await markOrderAsPaid(dataToSend.orderId);
                await updateOrderAddress(dataToSend.orderId, dataToSend.addressId);
            }
            setSelectedPayment(null);
            setPaymentFormData({ orderId: '', addressId: '', method: '', amount: '', paymentDate: '' });
            await loadAllData();
        } catch (err) {
            setError(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É.');
        }
    };

    const handleDeletePayment = async (id) => {
        if (!window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ø–ª–∞—Ç—ñ–∂?')) return;
        try {
            await deletePayment(id);
            setMessage('–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è');
            setPayments(prev => prev.filter(p => p.id !== id));
        } catch (err) {
            setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂.');
        }
    };

    const handleEditClick = (payment) => {
        setSelectedPayment(payment);
        setPaymentFormData({
            orderId: payment.orderId.toString(),
            addressId: payment.addressId?.toString() || '',
            method: payment.method || '',
            amount: payment.amount.toString(),
            paymentDate: payment.paymentDate ? new Date(payment.paymentDate).toISOString().slice(0, 16) : '',
        });
        formRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    const handlePayForOrderClick = (order) => {
        setSelectedPayment(null);
        setPaymentFormData({
            orderId: order.id.toString(),
            amount: order.total ? order.total.toFixed(2).toString() : '',
            addressId: '',
            method: '',
            paymentDate: ''
        });
        formRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    const formatAddressById = (id) => {
        if (!id) return '-';
        const addr = addresses.find(a => a.id === id);
        if (!addr) return '–ê–¥—Ä–µ—Å–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞';
        return `${addr.city}, ${addr.street}`;
    };

    const unpaidOrders = orders.filter(order => order.status === 'PENDING');

    if (loading) {
        return <Container className="text-center mt-5"><Spinner animation="border" /></Container>;
    }

    return (
        <Container fluid className="py-5 bg-light">
            <Container className="bg-white p-4 p-md-5 rounded-3 shadow-sm">
                <h1 className="text-center mb-5 text-primary fw-bold">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂–∞–º–∏</h1>
                <Button variant="outline-secondary" onClick={() => navigate(-1)} className="mb-4">‚Üê –ù–∞–∑–∞–¥</Button>

                {error && <Alert variant="danger">{error}</Alert>}
                {message && <Alert variant="success">{message}</Alert>}

                <Card className="mb-5 shadow-sm">
                    <Card.Header as="h5">–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É</Card.Header>
                    <Card.Body>
                        <Form onSubmit={handleAddressSubmit}>
                            <Row>
                                <Col md={6}><Form.Control name="country" value={addressFormData.country} onChange={handleAddressInputChange} placeholder="–ö—Ä–∞—ó–Ω–∞" required className="mb-2" /></Col>
                                <Col md={6}><Form.Control name="city" value={addressFormData.city} onChange={handleAddressInputChange} placeholder="–ú—ñ—Å—Ç–æ" required className="mb-2" /></Col>
                                <Col md={6}><Form.Control name="street" value={addressFormData.street} onChange={handleAddressInputChange} placeholder="–í—É–ª–∏—Ü—è" required className="mb-2" /></Col>
                                <Col md={6}><Form.Control name="houseNumber" value={addressFormData.houseNumber} onChange={handleAddressInputChange} placeholder="–ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É" required className="mb-2" /></Col>
                            </Row>
                            <Button type="submit" variant="info" className="mt-2">–î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É</Button>
                        </Form>
                    </Card.Body>
                </Card>

                <Card ref={formRef} className="mb-5 shadow-sm">
                    <Card.Header as="h5">{selectedPayment ? '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–ª–∞—Ç—ñ–∂' : '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂'}</Card.Header>
                    <Card.Body>
                        <Form onSubmit={handlePaymentFormSubmit}>
                            <Row>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="orderIdSelect">
                                        <Form.Label>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:</Form.Label>
                                        <Form.Select name="orderId" value={paymentFormData.orderId} onChange={handlePaymentInputChange} required>
                                            <option value="">–í–∏–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</option>
                                            {unpaidOrders.map(o => <option key={o.id} value={o.id}>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{o.id} - {o.total.toFixed(2)}‚Ç¥</option>)}
                                        </Form.Select>
                                    </Form.Group>
                                </Col>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="addressIdSelect">
                                        <Form.Label>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</Form.Label>
                                        <Form.Select name="addressId" value={paymentFormData.addressId} onChange={handlePaymentInputChange} required>
                                            <option value="">–í–∏–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É</option>
                                            {addresses.map(a => <option key={a.id} value={a.id}>{a.city}, {a.street}</option>)}
                                        </Form.Select>
                                    </Form.Group>
                                </Col>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="methodSelect">
                                        <Form.Label>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:</Form.Label>
                                        <Form.Select name="method" value={paymentFormData.method} onChange={handlePaymentInputChange} required>
                                            <option value="">–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥</option>
                                            <option value="CREDIT_CARD">–ö—Ä–µ–¥–∏—Ç–Ω–∞ –∫–∞—Ä—Ç–∞</option>
                                            <option value="PAYPAL">PayPal</option>
                                        </Form.Select>
                                    </Form.Group>
                                </Col>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="amountInput">
                                        <Form.Label>–°—É–º–∞:</Form.Label>
                                        <Form.Control name="amount" type="number" value={paymentFormData.amount} onChange={handlePaymentInputChange} placeholder="–°—É–º–∞" required readOnly />
                                    </Form.Group>
                                </Col>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="paymentDateInput">
                                        <Form.Label>–î–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏:</Form.Label>
                                        <Form.Control name="paymentDate" type="datetime-local" value={paymentFormData.paymentDate} onChange={handlePaymentInputChange} />
                                    </Form.Group>
                                </Col>
                            </Row>
                            <Button type="submit">{selectedPayment ? '–û–Ω–æ–≤–∏—Ç–∏' : '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂'}</Button>
                            {selectedPayment && <Button variant="secondary" className="ms-2" onClick={() => { setSelectedPayment(null); setPaymentFormData({ orderId: '', addressId: '', method: '', amount: '', paymentDate: '' }); }}>–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>}
                        </Form>
                    </Card.Body>
                </Card>

                <h3 className="mt-5">–ù–µ–æ–ø–ª–∞—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
                {unpaidOrders.length === 0 ? <p>–ù–µ–æ–ø–ª–∞—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.</p> : (
                    <Table striped bordered hover responsive>
                        <thead><tr><th>ID</th><th>–°—É–º–∞</th><th>–°—Ç–∞—Ç—É—Å</th><th>–î—ñ—è</th></tr></thead>
                        <tbody>{unpaidOrders.map(order => <tr key={order.id}><td>{order.id}</td><td>{order.total.toFixed(2)}‚Ç¥</td><td>{order.status}</td><td><Button size="sm" onClick={() => handlePayForOrderClick(order)}>–û–ø–ª–∞—Ç–∏—Ç–∏</Button></td></tr>)}</tbody>
                    </Table>
                )}

                <h3 className="mt-5">–Ü—Å—Ç–æ—Ä—ñ—è –ø–ª–∞—Ç–µ–∂—ñ–≤</h3>
                {payments.length === 0 ? <p>–Ü—Å—Ç–æ—Ä—ñ—è –ø–ª–∞—Ç–µ–∂—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.</p> : (
                    <Table striped bordered hover responsive>
                        <thead><tr><th>ID</th><th>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</th><th>–°—É–º–∞</th><th>–ú–µ—Ç–æ–¥</th><th>–î–∞—Ç–∞</th><th>–î—ñ—ó</th></tr></thead>
                        <tbody>{payments.map(p => <tr key={p.id}><td>{p.id}</td><td>{p.orderId}</td><td>{p.amount.toFixed(2)}‚Ç¥</td><td>{p.method}</td><td>{p.paymentDate ? new Date(p.paymentDate).toLocaleString() : '-'}</td><td><Button size="sm" variant="primary" className="me-2" onClick={() => handleEditClick(p)}>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</Button><Button size="sm" variant="danger" onClick={() => handleDeletePayment(p.id)}>–í–∏–¥–∞–ª–∏—Ç–∏</Button></td></tr>)}</tbody>
                    </Table>
                )}
            </Container>
        </Container>
    );
};

export default PaymentPage;