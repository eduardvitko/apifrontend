import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Table, Alert, Spinner, Form } from 'react-bootstrap';

// 1. –Ü–ú–ü–û–†–¢–£–Ñ–ú–û –û–ù–û–í–õ–ï–ù–ò–ô –ù–ê–ë–Ü–† –§–£–ù–ö–¶–Ü–ô
import { fetchMyOrders, cancelOrder, deleteOrder } from '../api';

const OrdersPage = () => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [message, setMessage] = useState('');
    const [sortBy, setSortBy] = useState('date');
    const [sortOrder, setSortOrder] = useState('desc');
    const navigate = useNavigate();

    // 2. –°–ü–†–û–©–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø. –¢–ï–ü–ï–† –¢–£–¢ –õ–ò–®–ï –û–î–ò–ù –ó–ê–ü–ò–¢!
    const fetchOrders = useCallback(async () => {
        setLoading(true);
        setError('');
        setMessage('');

        try {
            // –†–æ–±–∏–º–æ –æ–¥–∏–Ω –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç. –ë–µ–∫–µ–Ω–¥ —Å–∞–º –≤–∏–∑–Ω–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —Ç–æ–∫–µ–Ω–æ–º.
            const response = await fetchMyOrders();
            setOrders(response.data);
        } catch (err) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:", err);
            // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –≤ api.js —Å–∞–º –æ–±—Ä–æ–±–∏—Ç—å –ø–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            setError(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –∞–±–æ —Å–µ—Ä–≤–µ—Ä–∞.');
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        if (!localStorage.getItem('token')) {
            setError('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
            setLoading(false);
            navigate('/login');
            return;
        }
        fetchOrders();
    }, [fetchOrders, navigate]);

    // –§—É–Ω–∫—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (–±–µ–∑ –∑–º—ñ–Ω, –≤–æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞)
    const sortOrders = (ordersToSort) => {
        const ordersCopy = [...ordersToSort];
        if (sortBy === 'date') {
            ordersCopy.sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate));
            if (sortOrder === 'asc') ordersCopy.reverse();
        } else if (sortBy === 'status') {
            const statusOrder = ['PENDING', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'PAID'];
            ordersCopy.sort((a, b) => {
                const indexA = statusOrder.indexOf(a.status);
                const indexB = statusOrder.indexOf(b.status);
                return sortOrder === 'asc' ? indexA - indexB : indexB - indexA;
            });
        }
        return ordersCopy;
    };
    const sortedOrders = sortOrders(orders);

    const handleCancelOrder = useCallback(async (orderId) => {
        if (!window.confirm('–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?')) return;
        try {
            await cancelOrder(orderId);
            setMessage('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ! ‚ùå');
            fetchOrders(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ
        } catch (err) {
            setError(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
        }
    }, [fetchOrders]);

    const handleDeleteOrder = useCallback(async (orderId) => {
        if (!window.confirm('–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.')) return;
        try {
            await deleteOrder(orderId);
            setMessage('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è');
            setOrders(prevOrders => prevOrders.filter(order => order.id !== orderId));
        } catch (err) {
            setError(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
        }
    }, []);

    const handlePayOrder = (orderId, orderTotal) => {
        navigate('/payments', { state: { orderId, amount: orderTotal } });
    };

    if (loading) {
        return (
            <Container className="d-flex justify-content-center align-items-center" style={{ minHeight: '80vh' }}>
                <div className="text-center">
                    <Spinner animation="border" variant="primary" role="status" className="mb-3" />
                    <p className="text-muted">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å...</p>
                </div>
            </Container>
        );
    }

    return (
        <Container fluid className="py-5 bg-light">
            <Container className="bg-white p-4 p-md-5 rounded-3 shadow-sm">
                <h1 className="text-center mb-4 text-primary fw-bold">–ú–æ—ó –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>

                {orders.length > 0 && (
                    <div className="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-3">
                        <Button variant="outline-secondary" onClick={() => navigate('/')}>‚Üê –î–æ –ø–æ–∫—É–ø–æ–∫</Button>
                        <div className="d-flex align-items-center gap-2">
                            <Form.Label htmlFor="sortBy" className="fw-semibold text-nowrap mb-0">–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞:</Form.Label>
                            <Form.Select id="sortBy" size="sm" value={sortBy} onChange={e => setSortBy(e.target.value)} style={{ width: 'auto' }}>
                                <option value="date">–î–∞—Ç–æ—é</option>
                                <option value="status">–°—Ç–∞—Ç—É—Å–æ–º</option>
                            </Form.Select>
                            <Form.Select id="sortOrder" size="sm" value={sortOrder} onChange={e => setSortOrder(e.target.value)} style={{ width: 'auto' }}>
                                <option value="desc">–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º</option>
                                <option value="asc">–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º</option>
                            </Form.Select>
                        </div>
                    </div>
                )}

                {error && <Alert variant="danger">{error}</Alert>}
                {message && <Alert variant="success">{message}</Alert>}

                {!loading && sortedOrders.length === 0 ? (
                    <div className="text-center py-5">
                        <p className="text-muted fs-5">–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å. üòî</p>
                        <Button variant="primary" onClick={() => navigate('/')}>–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–∫—É–ø–æ–∫</Button>
                    </div>
                ) : (
                    <Row xs={1} lg={2} xl={3} className="g-4">
                        {sortedOrders.map(order => (
                            <Col key={order.id}>
                                <Card className="h-100 shadow-sm border-light">
                                    <Card.Header className="d-flex justify-content-between align-items-center">
                                        <span className="fw-bold">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</span>
                                        <span className={`badge ${order.status === 'CANCELLED' ? 'bg-danger' : order.status === 'PAID' ? 'bg-success' : 'bg-warning text-dark'}`}>
                                            {order.status}
                                        </span>
                                    </Card.Header>
                                    <Card.Body>
                                        <Card.Text className="text-muted small mb-2">
                                            –î–∞—Ç–∞: {new Date(order.orderDate).toLocaleString()}
                                        </Card.Text>
                                        <h6 className="mt-3">–¢–æ–≤–∞—Ä–∏:</h6>
                                        <Table striped bordered size="sm" className="mb-2">
                                            <tbody>
                                            {order.items && order.items.length > 0 ? (
                                                order.items.map(item => (
                                                    <tr key={item.id}>
                                                        <td>{item.productName}</td>
                                                        <td className="text-end">{item.quantity} x {item.price.toFixed(2)}‚Ç¥</td>
                                                    </tr>
                                                ))
                                            ) : (
                                                <tr>
                                                    <td colSpan="2" className="text-center text-muted small">
                                                        (–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏)
                                                    </td>
                                                </tr>
                                            )}
                                            </tbody>
                                        </Table>
                                        <h5 className="text-end text-dark mt-3">
                                            –í—Å—å–æ–≥–æ: <span className="fw-bold text-primary">{order.total.toFixed(2)} ‚Ç¥</span>
                                        </h5>
                                    </Card.Body>
                                    <Card.Footer className="d-grid gap-2">
                                        {order.status === 'PENDING' && (
                                            <div className="d-flex gap-2">
                                                <Button variant="success" size="sm" onClick={() => handlePayOrder(order.id, order.total)} className="flex-grow-1">–°–ø–ª–∞—Ç–∏—Ç–∏</Button>
                                                <Button variant="outline-danger" size="sm" onClick={() => handleCancelOrder(order.id)} className="flex-grow-1">–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>
                                            </div>
                                        )}
                                        {order.status === 'CANCELLED' && (
                                            <Button variant="outline-secondary" size="sm" onClick={() => handleDeleteOrder(order.id)}>–í–∏–¥–∞–ª–∏—Ç–∏</Button>
                                        )}
                                    </Card.Footer>
                                </Card>
                            </Col>
                        ))}
                    </Row>
                )}
            </Container>
        </Container>
    );
};

export default OrdersPage;