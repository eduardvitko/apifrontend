import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button, Table, Alert, Spinner } from 'react-bootstrap';

// –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑—É–≤–∞—Ç–∏ URL-–∞–¥—Ä–µ—Å–∏
// –ü—Ä–∏–∫–ª–∞–¥: src/config.js
export const API_ENDPOINTS = {
    BASE_URL: 'http://localhost:8080/api',
    PAYMENTS: 'http://localhost:8080/api/payments',
    ORDERS: 'http://localhost:8080/api/orders',
    USER_ME: 'http://localhost:8080/api/user/me',
};

const OrdersPage = () => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [message, setMessage] = useState('');
    const navigate = useNavigate();

    const getToken = () => localStorage.getItem('jwt');

    const getAuthHeaders = () => ({
        headers: {
            Authorization: `Bearer ${getToken()}`
        }
    });

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å (–≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
    const fetchOrders = async () => {
        setLoading(true);
        setError('');
        setMessage('');
        const token = getToken();

        if (!token) {
            setError('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –¢–æ–∫–µ–Ω JWT –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.');
            setLoading(false);
            return;
        }

        try {
            const userResponse = await axios.get(API_ENDPOINTS.USER_ME, getAuthHeaders());
            const userId = userResponse.data.id;

            const ordersResponse = await axios.get(`${API_ENDPOINTS.ORDERS}/user/${userId}`, getAuthHeaders());
            setOrders(ordersResponse.data); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        } catch (err) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:", err);
            if (err.response) {
                if (err.response.status === 401 || err.response.status === 403) {
                    setError('–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è –∞–±–æ –≤–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.');
                    localStorage.removeItem('jwt');
                    navigate('/login');
                } else {
                    setError(`–ü–æ–º–∏–ª–∫–∞: ${err.response.status} - ${err.response.data.message || err.response.statusText}`);
                }
            } else {
                setError('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –∞–±–æ —Å–µ—Ä–≤–µ—Ä–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
            }
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchOrders(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    }, [navigate]);

    const handleCancelOrder = async (orderId) => {
        if (!window.confirm('–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?')) {
            return;
        }

        setError('');
        setMessage('');

        try {
            await axios.put(`${API_ENDPOINTS.ORDERS}/${orderId}/cancel`, {}, getAuthHeaders());
            setMessage('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ! ‚ùå');

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ, —â–æ–± –∑–º—ñ–Ω–∏ –≤—ñ–¥–æ–±—Ä–∞–∑–∏–ª–∏—Å—è –º–∏—Ç—Ç—î–≤–æ
            setOrders(prevOrders =>
                prevOrders.map(order =>
                    order.id === orderId ? { ...order, status: 'CANCELLED' } : order
                )
            );
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', err);
            setError(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
        }
    };

    const handleDeleteOrder = async (orderId) => {
        if (!window.confirm('–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.')) {
            return;
        }

        setError('');
        setMessage('');

        try {
            await axios.delete(`${API_ENDPOINTS.ORDERS}/delete/${orderId}`, getAuthHeaders());
            setMessage('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ! üóëÔ∏è');

            // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É
            setOrders(prevOrders => prevOrders.filter(order => order.id !== orderId));
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', err);
            setError(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
        }
    };

    const handlePayOrder = (orderId, orderTotal) => {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–ª–∞—Ç–µ–∂—ñ–≤, –ø–µ—Ä–µ–¥–∞—é—á–∏ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ state
        navigate('/payments', { state: { orderId, amount: orderTotal } });
    };

    if (loading) {
        return (
            <Container className="d-flex justify-content-center align-items-center min-vh-100 bg-light">
                <div className="text-center">
                    <Spinner animation="border" role="status" className="mb-3" />
                    <p className="text-muted">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å...</p>
                </div>
            </Container>
        );
    }

    return (
        <Container fluid className="py-5 bg-light">
            <Container className="bg-white p-5 rounded-3 shadow border">
                <h1 className="text-center mb-5 text-primary fw-bold">
                    –ú–æ—ó –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
                </h1>

                <Button variant="secondary" onClick={() => navigate(-1)} className="mb-4">
                    &#8592; –ù–∞–∑–∞–¥
                </Button>

                {error && (
                    <Alert variant="danger" className="mb-4">
                        <strong>–ü–æ–º–∏–ª–∫–∞!</strong> {error}
                    </Alert>
                )}
                {message && (
                    <Alert variant="success" className="mb-4">
                        <strong>–£—Å–ø—ñ—Ö!</strong> {message}
                    </Alert>
                )}

                {orders.length === 0 ? (
                    <p className="text-center text-muted fs-5">
                        –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å. üòî –ú–æ–∂–ª–∏–≤–æ, —á–∞—Å —â–æ—Å—å –∑–∞–º–æ–≤–∏—Ç–∏?
                    </p>
                ) : (
                    <Row xs={1} lg={2} className="g-4">
                        {orders.map(order => (
                            <Col key={order.id}>
                                <Card className="h-100 shadow-sm border-secondary transform-hover">
                                    <Card.Header className="bg-light text-dark fw-bold d-flex justify-content-between align-items-center">
                                        –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}
                                        <span className={`badge ${
                                            order.status === 'CANCELLED' ? 'bg-danger' :
                                                order.status === 'PAID' || order.status === 'COMPLETED' ? 'bg-success' : // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ PAID —Ç–∞ COMPLETED —è–∫ —É—Å–ø—ñ—à–Ω—ñ
                                                    'bg-warning text-dark'
                                        }`}>
                                            {order.status}
                                        </span>
                                    </Card.Header>
                                    <Card.Body>
                                        <Card.Text className="text-muted mb-2">
                                            –î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {new Date(order.orderDate).toLocaleString()}
                                        </Card.Text>
                                        <h5 className="mb-3 text-dark">–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h5>
                                        <Table striped bordered hover size="sm">
                                            <thead>
                                            <tr>
                                                <th>–¢–æ–≤–∞—Ä</th>
                                                <th>–ö—ñ–ª-—Ç—å</th>
                                                <th>–¶—ñ–Ω–∞</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            {order.items && order.items.map(item => (
                                                <tr key={item.id}>
                                                    <td>{item.productName}</td>
                                                    <td>{item.quantity}</td>
                                                    <td>{item.price.toFixed(2)} ‚Ç¥</td>
                                                </tr>
                                            ))}
                                            </tbody>
                                        </Table>
                                        <h4 className="text-end text-primary mt-3">
                                            –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: <span className="fw-bold">{order.total ? order.total.toFixed(2) : '0.00'} ‚Ç¥</span>
                                        </h4>

                                        <div className="d-flex flex-column flex-md-row justify-content-end gap-2 mt-3">
                                            {order.status === 'PENDING' && (
                                                <>
                                                    <Button
                                                        variant="success"
                                                        onClick={() => handlePayOrder(order.id, order.total)}
                                                        className="flex-grow-1 flex-md-grow-0"
                                                    >
                                                        –°–ø–ª–∞—Ç–∏—Ç–∏
                                                    </Button>
                                                    <Button
                                                        variant="outline-danger"
                                                        onClick={() => handleCancelOrder(order.id)}
                                                        className="flex-grow-1 flex-md-grow-0"
                                                    >
                                                        –°–∫–∞—Å—É–≤–∞—Ç–∏
                                                    </Button>
                                                </>
                                            )}

                                            {/* –ö–Ω–æ–ø–∫–∞ "–°–ø–ª–∞—á–µ–Ω–æ" —Ç–µ–ø–µ—Ä –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –¥–ª—è PAID —Ç–∞ COMPLETED */}
                                            {(order.status === 'PAID' || order.status === 'COMPLETED') && (
                                                <Button variant="success" disabled className="flex-grow-1 flex-md-grow-0">
                                                    <i className="bi bi-check-circle me-2"></i> –°–ø–ª–∞—á–µ–Ω–æ
                                                </Button>
                                            )}

                                            {order.status === 'CANCELLED' && (
                                                <Button
                                                    variant="outline-secondary"
                                                    onClick={() => handleDeleteOrder(order.id)}
                                                    className="flex-grow-1 flex-md-grow-0"
                                                >
                                                    –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                                                </Button>
                                            )}
                                        </div>
                                    </Card.Body>
                                </Card>
                            </Col>
                        ))}
                    </Row>
                )}
            </Container>
        </Container>
    );
};

export default OrdersPage;