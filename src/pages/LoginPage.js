import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è API-–∑–∞–ø–∏—Ç—ñ–≤
import { loginUser, fetchUserProfile } from '../api'; // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π

const LoginPage = () => {
    const { t } = useTranslation();
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();

    const handleLogin = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        try {
            // 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ª–æ–≥—ñ–Ω
            const loginResponse = await loginUser({ username, password });

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–æ–∫–µ–Ω —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (loginResponse.data && loginResponse.data.token) {
                const { token } = loginResponse.data;

                // 2. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω —É localStorage. –¶–µ –∞–∫—Ç–∏–≤—É—î '–ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á' –≤ api.js –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.
                localStorage.setItem('token', token);

                // 3. –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –π–æ–≥–æ —Ä–æ–ª—å
                const profileResponse = await fetchUserProfile();
                const roles = profileResponse.data.roles;

                // 4. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–æ–ª—ñ
                if (roles && roles.includes('ADMIN')) {
                    navigate('/admin');
                } else {
                    navigate('/profile');
                }
            } else {
                // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–∞, –∞–ª–µ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—É
                setError(t('login_error_no_token'));
            }

        } catch (err) {
            // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏, —â–æ –º–æ–≥–ª–∏ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏
            const errorMessage = err.response?.data?.message || err.response?.data || t('login_error');
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div
            className="container d-flex justify-content-center"
            style={{ height: 'auto', paddingTop: '100px' }}
        >
            <div className="card p-4 shadow" style={{ maxWidth: '400px', width: '100%' }}>
                <h3 className="mb-4 text-center">üîê {t('login_title')}</h3>

                {error && <div className="alert alert-danger">{error}</div>}

                <form onSubmit={handleLogin}>
                    <div className="mb-3">
                        <label htmlFor="username" className="form-label">{t('login_username')}</label>
                        <input
                            type="text"
                            id="username"
                            className="form-control"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            required
                            autoFocus
                        />
                    </div>

                    <div className="mb-3">
                        <label htmlFor="password" className="form-label">{t('login_password')}</label>
                        <input
                            type="password"
                            id="password"
                            className="form-control"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </div>

                    <button type="submit" className="btn btn-primary w-100" disabled={loading}>
                        {loading ? (
                            <>
                                <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                {t('login_loading')}
                            </>
                        ) : t('login_button')}
                    </button>
                </form>
            </div>
        </div>
    );
};

export default LoginPage;