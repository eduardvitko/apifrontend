import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
// 1. –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä 'api'
import api, { loginUser } from '../api'; // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É api.js –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π

const LoginPage = () => {
    const { t } = useTranslation();
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();

    const handleLogin = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        try {
            // 2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é loginUser –∑ –Ω–∞—à–æ–≥–æ api.js
            const response = await loginUser({
                username,
                password
            });

            // 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω. –í–∞–∂–ª–∏–≤–æ, —â–æ–± –∫–ª—é—á –±—É–≤ –æ–¥–Ω–∞–∫–æ–≤–∏–π –≤—Å—é–¥–∏.
            //    –ù–∞—à api.js —à—É–∫–∞—î 'token', —Ç–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'token'.
            const { token } = response.data;
            localStorage.setItem('token', token);

            // 4. –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Å—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!
            //    –ù–∞—à –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –≤ api.js –∑—Ä–æ–±–∏—Ç—å —Ü–µ –∑–∞ –Ω–∞—Å.
            const profileResponse = await api.get('/api/user/me'); // <-- –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —à–ª—è—Ö

            const roles = profileResponse.data.roles;

            if (roles.includes('ADMIN')) {
                navigate('/admin');
            } else {
                navigate('/profile');
            }

        } catch (err) {
            // –í–∏–≤–æ–¥–∏–º–æ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ —î
            const errorMessage = err.response?.data?.message || t('login_error');
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div
            className="container d-flex justify-content-center"
            style={{ height: 'auto', paddingTop: '100px' }}
        >
            <div className="card p-4 shadow" style={{ maxWidth: '400px', width: '100%' }}>
                <h3 className="mb-4 text-center">üîê {t('login_title')}</h3>

                {error && <div className="alert alert-danger">{error}</div>}

                <form onSubmit={handleLogin}>
                    <div className="mb-3">
                        <label htmlFor="username" className="form-label">{t('login_username')}</label>
                        <input
                            type="text"
                            id="username"
                            className="form-control"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            required
                            autoFocus
                        />
                    </div>

                    <div className="mb-3">
                        <label htmlFor="password" className="form-label">{t('login_password')}</label>
                        <input
                            type="password"
                            id="password"
                            className="form-control"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </div>

                    <button type="submit" className="btn btn-primary w-100" disabled={loading}>
                        {loading ? (
                            <>
                                <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                {t('login_loading')}
                            </>
                        ) : t('login_button')}
                    </button>
                </form>
            </div>
        </div>
    );
};

export default LoginPage;